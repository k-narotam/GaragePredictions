var ROOT_URL = "https://addons.io";
var BASE_CONFIG_URL = ROOT_URL + "/api/v1/addons/apps/config";

var ADDONS_JSON_PATH = "addons.json";
var GIT_IGNORE_FILE_PATH = '.gitignore';
var GIT_IGNORE_TEXT = "# Addons.io\r\n" + ADDONS_JSON_PATH + "\r\n";

// NOTE: this won't work on Heroku, so we'll just rely on the network for env vars
setBackedUpEnvVars = function(callback) {
  // // get addons.json, send it to setEnvVars
  try {
    var fs = require('fs');

    fs.exists(ADDONS_JSON_PATH, function (exists) {
      if (exists) {
        fs.readFile(ADDONS_JSON_PATH, function (err, data) {
          if (err) { throw err };

          console.log("\r\nSetting env vars from addons.json backup file");
          setEnvVars(data);

          callback();
        });
      } else {
        callback();
      }
    });
  } catch (err) {
    // dont let this fail on heroku
    callback();
  }
}

// NOTE: this won't work on Heroku, so we'll just rely on the network for env vars
checkAndWriteGitignoreFile = function() {
  // write .gitignore if it doesn't exist, append addons.json
  try {
    var fs = require('fs');

    fs.exists(GIT_IGNORE_FILE_PATH, function (exists) {
      var gitIgnoreHasAddonsLine = false
      if (exists) {
        // check if addons.json is in file
        fs.readFile(GIT_IGNORE_FILE_PATH, function (err, data) {
          if (err) { throw err };

          if (data.toString().indexOf(GIT_IGNORE_TEXT) >= 0) {
            gitIgnoreHasAddonsLine = true;

            console.log(".gitignore already has addons.json");
          } else {
            writeGitignoreFile(fs);
          }
        });
      } else {
        // append addons.json to .gitignore
        console.log(".gitignore has been created.")
        writeGitignoreFile(fs);
      }
    });
  } catch (err) {
    // don't let this fail on Heroku because we use 'fs'
  }
}

writeGitignoreFile = function(fs) {
  fs.appendFile(GIT_IGNORE_FILE_PATH, GIT_IGNORE_TEXT, function (err) {
    if (err) { throw err };
    console.log(".gitignore updated with 'addons.json'");
  });
}

// NOTE: this won't work on Heroku, so we'll just rely on the network for env vars
checkAndWriteAddonsJsonFile = function(data) {
  try {
    var fs = require('fs');
    // write addons.json for next time around
    fs.writeFile(ADDONS_JSON_PATH, data, function (err) {
      if (err) { throw err };
      console.log("\r\n" + ADDONS_JSON_PATH + " has been saved as backup.")
    });
  } catch (err) {
    // dont let this fail on Heroku
  }
}

fetchAndSetEnvVars = function() {
  var request = require('request');

  var configUrl = BASE_CONFIG_URL + "?source=npm";
  var options = {
    'url': configUrl,
    'auth': {
      'user': process.env.ADDONS_API_ID,
      'pass': process.env.ADDONS_AUTH_TOKEN
    }
  }

  request(options, function (error, response, body) {
    if (!error && response.statusCode == 200) {

      console.log("\r\nSetting env vars from server:");
      setEnvVars(body);

      checkAndWriteGitignoreFile();
      checkAndWriteAddonsJsonFile(body);

    } else if (response.statusCode == 401) {
      console.error("Error: Unauthorized. ADDONS_API_ID or ADDONS_AUTH_TOKEN is invalid.");

    } else {
      console.error("An unknown error has occured. Please contact support@addons.io.");

    }
  });
}

setEnvVars = function(data) {
  services = JSON.parse(data);
  length = services.length;

  for (var i=0; i < length; i++) {
    envVars = services[i].env_vars;

    Object.keys(envVars).forEach(function (key) {
      if (process.env[key] != envVars[key]) {
        console.log("setting process.env." + key);

        process.env[key] = envVars[key];
      }
    });
  }
}

module.exports = function() {

  setBackedUpEnvVars( function() {

    if (process.env.ADDONS_API_ID == undefined) {
      console.error("Error: process.env.ADDONS_API_ID must be defined");
    } else if (process.env.ADDONS_AUTH_TOKEN == undefined) {
      console.error("Error: process.env.ADDONS_AUTH_TOKEN must be defined");
    } else { // ay-okay to proceed, we have our addons app config
      fetchAndSetEnvVars();
    }

  });

};
