{"ast":null,"code":"var _jsxFileName = \"/Users/karina/Desktop/garagePredictions/frontend/src/pages/Map.js\",\n    _s = $RefreshSig$();\n\nimport { MapContainer, useMap, useMapEvent, Rectangle, TileLayer, Marker, Tooltip, Popup } from \"react-leaflet\";\nimport { useCallback, useMemo, useState } from 'react';\nimport \"leaflet/dist/leaflet.css\";\nimport Navbar from \"../components/Navbar\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOUNDS_STYLE = {\n  weight: 1\n};\n\nfunction MinimapBounds(_ref) {\n  _s();\n\n  let {\n    parentMap,\n    zoom\n  } = _ref;\n  const minimap = useMap(); // Clicking a point on the minimap sets the parent's map center\n\n  const onClick = useCallback(e => {\n    parentMap.setView(e.latlng, parentMap.getZoom());\n  }, [parentMap]);\n  useMapEvent('click', onClick); // Keep track of bounds in state to trigger renders\n\n  const [bounds, setBounds] = useState(parentMap.getBounds());\n  const onChange = useCallback(() => {\n    setBounds(parentMap.getBounds()); // Update the minimap's view to match the parent map's center and zoom\n\n    minimap.setView(parentMap.getCenter(), zoom);\n  }, [minimap, parentMap, zoom]); // Listen to events on the parent map\n\n  const handlers = useMemo(() => ({\n    move: onChange,\n    zoom: onChange\n  }), []);\n  useEventHandlers({\n    instance: parentMap\n  }, handlers);\n  return /*#__PURE__*/_jsxDEV(Rectangle, {\n    bounds: bounds,\n    pathOptions: BOUNDS_STYLE\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n}\n\n_s(MinimapBounds, \"LGr8rDSK+X7Jsvw9KKOTY/35tdM=\", true, function () {\n  return [useMap, useMapEvent];\n});\n\n_c = MinimapBounds;\n\nconst Map = () => {\n  const defaultPosition = [28.600574, -81.197687]; // UCF position\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map__container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: defaultPosition,\n      zoom: 20,\n      scrollWheelZoom: true,\n      dragging: false,\n      style: {\n        height: 300,\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: [28.600003615431984, -81.20547129871996],\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"I am a pop-up!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Map;\nexport default Map;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MinimapBounds\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"sources":["/Users/karina/Desktop/garagePredictions/frontend/src/pages/Map.js"],"names":["MapContainer","useMap","useMapEvent","Rectangle","TileLayer","Marker","Tooltip","Popup","useCallback","useMemo","useState","Navbar","React","BOUNDS_STYLE","weight","MinimapBounds","parentMap","zoom","minimap","onClick","e","setView","latlng","getZoom","bounds","setBounds","getBounds","onChange","getCenter","handlers","move","useEventHandlers","instance","Map","defaultPosition","height","width"],"mappings":"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","sourcesContent":["import { MapContainer, useMap, useMapEvent, Rectangle,  TileLayer, Marker, Tooltip, Popup } from \"react-leaflet\";\nimport { useCallback, useMemo, useState } from 'react'\nimport \"leaflet/dist/leaflet.css\";\nimport Navbar from \"../components/Navbar\";\nimport React from 'react';\n\nconst BOUNDS_STYLE = { weight: 1 }\n\n\nfunction MinimapBounds({ parentMap, zoom }) {\n  const minimap = useMap()\n\n  // Clicking a point on the minimap sets the parent's map center\n  const onClick = useCallback(\n    (e) => {\n      parentMap.setView(e.latlng, parentMap.getZoom())\n    },\n    [parentMap],\n  )\n  useMapEvent('click', onClick)\n\n  // Keep track of bounds in state to trigger renders\n  const [bounds, setBounds] = useState(parentMap.getBounds())\n  const onChange = useCallback(() => {\n    setBounds(parentMap.getBounds())\n    // Update the minimap's view to match the parent map's center and zoom\n    minimap.setView(parentMap.getCenter(), zoom)\n  }, [minimap, parentMap, zoom])\n\n  // Listen to events on the parent map\n  const handlers = useMemo(() => ({ move: onChange, zoom: onChange }), [])\n  useEventHandlers({ instance: parentMap }, handlers)\n\n  return <Rectangle bounds={bounds} pathOptions={BOUNDS_STYLE} />\n}\n\n\nconst Map = () => {\n  \n  const defaultPosition = [28.600574, -81.197687]; // UCF position\n\n  return (\n    \n    <div className=\"map__container\">\n    <Navbar/>\n      <MapContainer \n      center={defaultPosition} \n      zoom={20} \n      scrollWheelZoom={true} \n      dragging={false}\n      style={{ height: 300, width: 300 }}>\n      \n  \n        <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={[28.600003615431984, -81.20547129871996]}>\n            <Popup>\n                I am a pop-up!\n            </Popup>\n        </Marker>\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}